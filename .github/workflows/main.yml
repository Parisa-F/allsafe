name: Continuous Integration and Delivery

on:
  push:
    branches:
      - main
      - paris-dgango

env:
  DJANGO_TUTORIAL_API_IMAGE: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/backend/store
  DJANGO_TUTORIAL_NGINX_IMAGE: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/backend/nginx
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker environment
        run: |
          echo "DJANGO_TUTORIAL_API_IMAGE=${{ env.DJANGO_TUTORIAL_API_IMAGE }}" >> .env
          echo "DJANGO_TUTORIAL_NGINX_IMAGE=${{ env.DJANGO_TUTORIAL_NGINX_IMAGE }}" >> .env
          echo "RDS_ENGINE=${{ secrets.RDS_ENGINE }}" >> .env
          echo "RDS_DB_NAME=${{ secrets.RDS_DB_NAME }}" >> .env
          echo "RDS_USER_NAME=${{ secrets.RDS_USER_NAME }}" >> .env
          echo "RDS_PASS=${{ secrets.RDS_PASS }}" >> .env
          echo "RDS_HOST=${{ secrets.RDS_HOST }}" >> .env
          echo "RDS_PORT=${{ secrets.RDS_PORT }}" >> .env
          echo "NAMESPACE=${{ secrets.NAMESPACE }}" >> .env
          echo "PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> .env
          # Optional: for debugging, ensure sensitive info is not printed in logs
          cat .env

      - name: Log in to GitHub Packages
        run: echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install docker-compose

      - name: Build and push images
        run: |
          docker-compose -f backend/docker-compose.ci.yml build --no-cache --pull
          docker push ${{ env.DJANGO_TUTORIAL_API_IMAGE }}
          docker push ${{ env.DJANGO_TUTORIAL_NGINX_IMAGE }}

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.EC2_SSH_KEY }}"

      - name: Copy files to EC2
        run: scp -o StrictHostKeyChecking=no -r ./backend ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/

      - name: Deploy images on AWS EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
              cd /home/${{ secrets.EC2_USER }}/backend
              docker-compose down --rmi all -v
              docker-compose up -d --build
              docker logout
          EOF
